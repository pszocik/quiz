{"version":3,"sources":["components/Header/Header.js","components/GameButton/GameButton.js","components/Question/Question.js","components/Game/Game.js","components/App/App.js","index.js"],"names":["Header","GameButton","text","onClick","className","Question","question","setQuestion","setLoadQuestion","points","setPoints","all_answers","map","answer","ev","target","style","backgroundColor","alert","validateAnswer","uuid","Game","useState","loadQuestion","useEffect","fetch","then","response","json","questionData","results","appendUUIDToAnswers","shuffleAnswers","joinAnswers","answers","sort","a","b","Math","random","el","uuidv4","Object","keys","length","App","document","title","ReactDOM","render","StrictMode","getElementById"],"mappings":"8MAQeA,EARA,WACb,OACE,iCACE,6C,sBCOSC,G,MARI,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC1B,OACE,wBAAQC,UAAU,cAAcD,QAASA,EAAzC,SACGD,MCiCQG,G,MAnCE,SAAC,GAMX,IALLC,EAKI,EALJA,SACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,OACAC,EACI,EADJA,UAcA,OACE,sBAAKN,UAAU,WAAf,UACE,4BAAIE,EAASA,WACZA,EAASK,YAAYC,KAAI,SAACC,GACzB,OACE,cAAC,EAAD,CACEV,QAAS,SAACW,GAAD,OAlBI,SAACA,EAAID,GACtBA,IAAWP,EAAQ,gBACrBQ,EAAGC,OAAOC,MAAMC,gBAAkB,QAClCP,EAAUD,EAAS,GACnBD,GAAgB,KAEhBE,EAAU,GACVH,EAAY,IACZW,MAAM,6BAUiBC,CAAeL,EAAID,EAAOA,SAE3CX,KAAMW,EAAOA,QADRA,EAAOO,cCkCTC,EA1DF,WACX,MAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBf,EAArB,KACA,EAAgCc,mBAAS,IAAzC,mBAAOhB,EAAP,KAAiBC,EAAjB,KACA,EAA4Be,mBAAS,GAArC,mBAAOb,EAAP,KAAeC,EAAf,KAEAc,qBAAU,WACR,IAAqB,IAAjBD,EAAuB,CAEzBE,MADY,wCAETC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GACL,IAAMC,EAAeD,EAAKE,QAAQ,GAClCD,EAAalB,YAAcoB,EACzBC,EAAeC,EAAYJ,KAE7BtB,EAAYsB,GACZrB,GAAgB,SAGrB,CAACe,IAEJ,IAAMU,EAAc,SAACJ,GAAD,4BACfA,EAAY,mBADG,CAElBA,EAAY,kBAGRG,EAAiB,SAACE,GAEtB,OADqB,YAAOA,GACLC,MAAK,SAACC,EAAGC,GAAJ,MAAU,GAAMC,KAAKC,aAG7CR,EAAsB,SAACG,GAE3B,OADsB,YAAOA,GACLtB,KAAI,SAAC4B,GAAD,MAAc,CAAEpB,KAAMqB,cAAU5B,OAAQ2B,OAGtE,OAAqC,IAAjCE,OAAOC,KAAKrC,GAAUsC,OAEtB,gCACE,0CAAanC,KACb,cAAC,EAAD,CACEH,SAAUA,EACVE,gBAAiBA,EACjBD,YAAaA,EACbE,OAAQA,EACRC,UAAWA,OAMf,8BACE,cAAC,EAAD,CAAYR,KAAM,aAAcC,QAAS,kBAAMK,GAAgB,S,MC3CxDqC,MAVf,WAEE,OADAC,SAASC,MAAQ,2BAEf,sBAAK3C,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCLN4C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFJ,SAASK,eAAe,W","file":"static/js/main.61225a4b.chunk.js","sourcesContent":["const Header = () => {\n  return (\n    <header>\n      <h1>Quiz app</h1>\n    </header>\n  );\n};\n\nexport default Header;\n","import \"./GameButton.css\";\n\nconst GameButton = ({ text, onClick }) => {\n  return (\n    <button className=\"game-button\" onClick={onClick}>\n      {text}\n    </button>\n  );\n};\n\nexport default GameButton;\n","import GameButton from \"../GameButton/GameButton.js\";\nimport \"./Question.css\";\n\nconst Question = ({\n  question,\n  setQuestion,\n  setLoadQuestion,\n  points,\n  setPoints,\n}) => {\n  const validateAnswer = (ev, answer) => {\n    if (answer === question[\"correct_answer\"]) {\n      ev.target.style.backgroundColor = \"green\";\n      setPoints(points + 1);\n      setLoadQuestion(true);\n    } else {\n      setPoints(0);\n      setQuestion({});\n      alert(\"Wrong answer, try again!\");\n    }\n  };\n\n  return (\n    <div className=\"question\">\n      <p>{question.question}</p>\n      {question.all_answers.map((answer) => {\n        return (\n          <GameButton\n            onClick={(ev) => validateAnswer(ev, answer.answer)}\n            key={answer.uuid}\n            text={answer.answer}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Question;\n","import { useState, useEffect } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Question from \"../Question/Question.js\";\nimport GameButton from \"../GameButton/GameButton.js\";\n\nconst Game = () => {\n  const [loadQuestion, setLoadQuestion] = useState(false);\n  const [question, setQuestion] = useState({});\n  const [points, setPoints] = useState(0);\n\n  useEffect(() => {\n    if (loadQuestion === true) {\n      const url = \"https://opentdb.com/api.php?amount=1\";\n      fetch(url)\n        .then((response) => response.json())\n        .then((json) => {\n          const questionData = json.results[0];\n          questionData.all_answers = appendUUIDToAnswers(\n            shuffleAnswers(joinAnswers(questionData))\n          );\n          setQuestion(questionData);\n          setLoadQuestion(false);\n        });\n    }\n  }, [loadQuestion]);\n\n  const joinAnswers = (questionData) => [\n    ...questionData[\"incorrect_answers\"],\n    questionData[\"correct_answer\"],\n  ];\n\n  const shuffleAnswers = (answers) => {\n    const shuffledAnswers = [...answers];\n    return shuffledAnswers.sort((a, b) => 0.5 - Math.random());\n  };\n\n  const appendUUIDToAnswers = (answers) => {\n    const answersWithUUIDs = [...answers];\n    return answersWithUUIDs.map((el) => (el = { uuid: uuidv4(), answer: el }));\n  };\n\n  if (Object.keys(question).length !== 0) {\n    return (\n      <div>\n        <h4>Points: {points}</h4>\n        <Question\n          question={question}\n          setLoadQuestion={setLoadQuestion}\n          setQuestion={setQuestion}\n          points={points}\n          setPoints={setPoints}\n        />\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <GameButton text={\"Start game\"} onClick={() => setLoadQuestion(true)} />\n      </div>\n    );\n  }\n};\n\nexport default Game;\n","import Header from \"../Header/Header\";\nimport Game from \"../Game/Game\";\nimport \"./App.css\";\n\nfunction App() {\n  document.title = \"Quiz | pszocik.github.io\";\n  return (\n    <div className=\"App\">\n      <Header />\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}